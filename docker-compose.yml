version: '3.3'
services:

  #############################################
  #               NETFLOWMETER                #
  #############################################
  netflowmeter:
    image: ryuk4/netflowmqtt-sensor:latest
    hostname: netflowmeter
    container_name: netflowmeter
    network_mode: host
    volumes:
      - /etc/localtime:/etc/localtime
      - /etc/timezone:/etc/timezone
    env_file:
      - ./envfile/netflowmeter.env

  #############################################
  #                 KAFKA                     #
  #############################################
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-server:7.2.1
    hostname: broker
    container_name: broker
    restart: on-failure
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  schema-registry:
    image: confluentinc/cp-schema-registry:7.2.1
    hostname: schema-registry
    container_name: schema-registry
    restart: on-failure
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  connect:
    image: ryuk4/cp-kafka-connect:6.2.2
    hostname: connect
    container_name: connect
    restart: on-failure
    depends_on:
      - zookeeper
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      # Json Converter
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      # Avro Converter
      # CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      # CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-6.1.1.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR

  control-center:
    image: provectuslabs/kafka-ui
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
      - connect
    ports:
      - "9021:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: 'MataElangLab'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:29092'
      KAFKA_CLUSTERS_0_ZOOKEEPER: 'zookeeper:2181'
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: 'http://schema-registry:8081'
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: 'MataElangLabConnector'
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: 'http://connect:8083'

  #############################################      
  #              SPARK CLUSTER                #
  #############################################
  spark-master:
    image: bde2020/spark-master:3.3.0-hadoop3.3
    hostname: spark-master
    container_name: spark-master
    expose:
      - "7077"
    ports:
      - "8180:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
    volumes:
      - shared-workspace:/resource

  spark-worker-1:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8181:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
    volumes:
      - shared-workspace:/resource

  #############################################
  #               Notebook                    #
  #############################################
  spark-notebook:
    image: ryuk4/spark-notebook:latest
    hostname: spark-notebook
    container_name: spark-notebook
    ports: 
        - "8888:8888"
        - "4040:4040"
        - "8787:8787"
    env_file:
      - ./envfile/notebook.env
    volumes:
      - shared-workspace:/resource

  #############################################
  #                Dasboard                   #
  #############################################
  dasboard:
    container_name: dasboard
    image: ryuk4/mel-dashboard:latest
    ports:
      - 9180:8080

  #############################################
  #                 MONGO                     #
  #############################################
  mongodb:
    image: mongo:latest
    hostname: mongodb
    container_name: mongodb
    restart: on-failure
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: mataelanglab
      # MONGO_INITDB_ROOT_USERNAME: root
      # MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./volume/mongodb/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: on-failure
    depends_on:
      - connect
      - mongodb
    ports:
      - 9181:8081
    environment:
      # - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      # - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb

  mongochart:
    image: quay.io/mongodb/charts:19.12.2
    hostname: mongo-charts
    container_name: mongo-charts
    restart: on-failure
    depends_on:
      - connect
      - mongodb
    ports:
      - 9182:80
      - 9443:443
    healthcheck:
        test: ["CMD", "charts-cli", "test-connection", "mongodb://172.17.0.1:27017"]
        interval: 30s
        timeout: 10s
        retries: 5
    volumes:
      - ./volume/mongochart/keys:/mongodb-charts/volumes/keys
      - ./volume/mongochart/logs:/mongodb-charts/volumes/logs
      - ./volume/mongochart/db-certs:/mongodb-charts/volumes/db-certs
      - ./volume/mongochart/web-certs:/mongodb-charts/volumes/web-certs
    environment:
      CHARTS_SUPPORT_WIDGET_AND_METRICS: "on"
      SSL_CERT_DIR: /mongodb-charts/voluinstructionsmes/db-certs
      CHARTS_MONGODB_URI: mongodb://172.17.0.1:27017
      # MONGODB_ROOT_PASSWORD: "password"

  #############################################
  #                 Dozzle                    #
  #############################################
  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 9183:8080

volumes:
  shared-workspace:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: $MEL_PATH/resource
